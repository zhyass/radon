// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const FULLTEXT = 57363
const KEY_BLOCK_SIZE = 57364
const NGRAM = 57365
const PARSER = 57366
const SPATIAL = 57367
const UNIQUE = 57368
const KEY = 57369
const ALL = 57370
const DISTINCT = 57371
const AS = 57372
const EXISTS = 57373
const ASC = 57374
const DESC = 57375
const INTO = 57376
const DUPLICATE = 57377
const DEFAULT = 57378
const SET = 57379
const LOCK = 57380
const FULL = 57381
const CHECKSUM = 57382
const VALUES = 57383
const LAST_INSERT_ID = 57384
const NEXT = 57385
const VALUE = 57386
const SHARE = 57387
const MODE = 57388
const SQL_NO_CACHE = 57389
const SQL_CACHE = 57390
const JOIN = 57391
const STRAIGHT_JOIN = 57392
const LEFT = 57393
const RIGHT = 57394
const INNER = 57395
const OUTER = 57396
const CROSS = 57397
const NATURAL = 57398
const USE = 57399
const FORCE = 57400
const ON = 57401
const ID = 57402
const HEX = 57403
const STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const LIST_ARG = 57409
const COMMENT = 57410
const COMMENT_KEYWORD = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const AND = 57417
const NOT = 57418
const BETWEEN = 57419
const CASE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const END = 57424
const LE = 57425
const GE = 57426
const NE = 57427
const NULL_SAFE_EQUAL = 57428
const IS = 57429
const LIKE = 57430
const REGEXP = 57431
const IN = 57432
const SHIFT_LEFT = 57433
const SHIFT_RIGHT = 57434
const DIV = 57435
const MOD = 57436
const UNARY = 57437
const COLLATE = 57438
const BINARY = 57439
const INTERVAL = 57440
const JSON_EXTRACT_OP = 57441
const JSON_UNQUOTE_EXTRACT_OP = 57442
const CREATE = 57443
const ALTER = 57444
const DROP = 57445
const RENAME = 57446
const ANALYZE = 57447
const ADD = 57448
const MODIFY = 57449
const TABLE = 57450
const INDEX = 57451
const VIEW = 57452
const TO = 57453
const IGNORE = 57454
const IF = 57455
const USING = 57456
const PRIMARY = 57457
const COLUMN = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const BIT = 57467
const TINYINT = 57468
const SMALLINT = 57469
const MEDIUMINT = 57470
const INT = 57471
const INTEGER = 57472
const BIGINT = 57473
const INTNUM = 57474
const REAL = 57475
const DOUBLE = 57476
const FLOAT_TYPE = 57477
const DECIMAL = 57478
const NUMERIC = 57479
const TIME = 57480
const TIMESTAMP = 57481
const DATETIME = 57482
const YEAR = 57483
const CHAR = 57484
const VARCHAR = 57485
const BOOL = 57486
const CHARACTER = 57487
const VARBINARY = 57488
const NCHAR = 57489
const CHARSET = 57490
const TEXT = 57491
const TINYTEXT = 57492
const MEDIUMTEXT = 57493
const LONGTEXT = 57494
const BLOB = 57495
const TINYBLOB = 57496
const MEDIUMBLOB = 57497
const LONGBLOB = 57498
const JSON = 57499
const ENUM = 57500
const GEOMETRY = 57501
const POINT = 57502
const LINESTRING = 57503
const POLYGON = 57504
const GEOMETRYCOLLECTION = 57505
const MULTIPOINT = 57506
const MULTILINESTRING = 57507
const MULTIPOLYGON = 57508
const NULLX = 57509
const AUTO_INCREMENT = 57510
const APPROXNUM = 57511
const SIGNED = 57512
const UNSIGNED = 57513
const ZEROFILL = 57514
const FIXED = 57515
const DYNAMIC = 57516
const STORAGE = 57517
const DISK = 57518
const MEMORY = 57519
const COLUMN_FORMAT = 57520
const AVG_ROW_LENGTH = 57521
const COMPRESSION = 57522
const CONNECTION = 57523
const DATA = 57524
const DIRECTORY = 57525
const DELAY_KEY_WRITE = 57526
const ENCRYPTION = 57527
const INSERT_METHOD = 57528
const MAX_ROWS = 57529
const MIN_ROWS = 57530
const PACK_KEYS = 57531
const PASSWORD = 57532
const ROW_FORMAT = 57533
const STATS_AUTO_RECALC = 57534
const STATS_PERSISTENT = 57535
const STATS_SAMPLE_PAGES = 57536
const TABLESPACE = 57537
const COMPRESSED = 57538
const REDUNDANT = 57539
const COMPACT = 57540
const TOKUDB_DEFAULT = 57541
const TOKUDB_FAST = 57542
const TOKUDB_SMALL = 57543
const TOKUDB_ZLIB = 57544
const TOKUDB_QUICKLZ = 57545
const TOKUDB_LZMA = 57546
const TOKUDB_SNAPPY = 57547
const TOKUDB_UNCOMPRESSED = 57548
const DATABASES = 57549
const TABLES = 57550
const WARNINGS = 57551
const VARIABLES = 57552
const EVENTS = 57553
const BINLOG = 57554
const GTID = 57555
const STATUS = 57556
const COLUMNS = 57557
const FIELDS = 57558
const CURRENT_TIMESTAMP = 57559
const DATABASE = 57560
const CURRENT_DATE = 57561
const CURRENT_TIME = 57562
const LOCALTIME = 57563
const LOCALTIMESTAMP = 57564
const UTC_DATE = 57565
const UTC_TIME = 57566
const UTC_TIMESTAMP = 57567
const REPLACE = 57568
const CONVERT = 57569
const CAST = 57570
const GROUP_CONCAT = 57571
const SEPARATOR = 57572
const MATCH = 57573
const AGAINST = 57574
const BOOLEAN = 57575
const LANGUAGE = 57576
const WITH = 57577
const QUERY = 57578
const EXPANSION = 57579
const UNUSED = 57580
const PARTITION = 57581
const PARTITIONS = 57582
const HASH = 57583
const LIST = 57584
const XA = 57585
const DISTRIBUTED = 57586
const ENGINES = 57587
const VERSIONS = 57588
const PROCESSLIST = 57589
const QUERYZ = 57590
const TXNZ = 57591
const KILL = 57592
const ENGINE = 57593
const SINGLE = 57594
const BEGIN = 57595
const START = 57596
const TRANSACTION = 57597
const COMMIT = 57598
const ROLLBACK = 57599
const GLOBAL = 57600
const LOCAL = 57601
const SESSION = 57602
const NAMES = 57603
const ISOLATION = 57604
const LEVEL = 57605
const READ = 57606
const WRITE = 57607
const ONLY = 57608
const REPEATABLE = 57609
const COMMITTED = 57610
const UNCOMMITTED = 57611
const SERIALIZABLE = 57612
const RADON = 57613
const ATTACH = 57614
const ATTACHLIST = 57615
const DETACH = 57616
const RESHARD = 57617
const CLEANUP = 57618

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"NGRAM",
	"PARSER",
	"SPATIAL",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:4582

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 211,
	87, 814,
	-2, 630,
	-1, 217,
	87, 676,
	-2, 608,
	-1, 451,
	115, 660,
	-2, 656,
	-1, 452,
	115, 661,
	-2, 657,
	-1, 486,
	112, 82,
	162, 82,
	165, 82,
	-2, 93,
	-1, 536,
	1, 76,
	294, 76,
	-2, 82,
	-1, 653,
	5, 27,
	-2, 579,
	-1, 687,
	112, 82,
	162, 82,
	165, 82,
	-2, 94,
	-1, 796,
	1, 77,
	294, 77,
	-2, 82,
	-1, 883,
	115, 663,
	-2, 659,
	-1, 1046,
	5, 28,
	-2, 458,
	-1, 1070,
	5, 28,
	-2, 580,
	-1, 1200,
	5, 27,
	-2, 582,
	-1, 1326,
	5, 28,
	-2, 583,
}

const yyPrivate = 57344

const yyLast = 9521

var yyAct = [...]int{

	452, 429, 1223, 1396, 1329, 1341, 1359, 559, 1366, 1212,
	656, 1334, 405, 1190, 1340, 1256, 212, 792, 1191, 980,
	912, 1270, 913, 666, 1267, 1170, 613, 3, 186, 877,
	56, 867, 773, 407, 1031, 1039, 1196, 216, 99, 66,
	874, 844, 909, 893, 347, 882, 657, 348, 936, 824,
	940, 876, 562, 688, 797, 715, 779, 748, 471, 394,
	454, 472, 460, 741, 99, 208, 220, 788, 350, 403,
	207, 470, 552, 55, 195, 430, 50, 185, 392, 473,
	99, 99, 427, 1079, 1080, 1081, 205, 176, 178, 177,
	179, 180, 473, 929, 474, 726, 928, 99, 474, 930,
	200, 675, 676, 674, 173, 345, 685, 684, 1388, 736,
	344, 1280, 1330, 718, 1416, 1395, 362, 363, 343, 1361,
	170, 1415, 1376, 624, 342, 1413, 50, 1394, 1375, 1183,
	1250, 1136, 365, 382, 191, 1137, 1138, 76, 77, 70,
	376, 821, 364, 71, 73, 713, 478, 95, 215, 949,
	1343, 580, 579, 589, 590, 582, 583, 584, 585, 586,
	587, 588, 581, 948, 990, 591, 772, 1299, 1155, 1362,
	986, 94, 1211, 780, 971, 972, 973, 369, 386, 388,
	99, 1000, 974, 60, 371, 372, 1245, 939, 1243, 1049,
	24, 51, 26, 27, 1014, 1013, 985, 1012, 359, 722,
	99, 1361, 564, 99, 352, 568, 567, 815, 220, 62,
	63, 64, 65, 75, 220, 220, 390, 46, 457, 1011,
	456, 28, 569, 357, 36, 1353, 82, 879, 1352, 814,
	745, 942, 745, 89, 941, 96, 465, 942, 1351, 468,
	941, 37, 366, 72, 53, 355, 354, 78, 353, 1321,
	1323, 1362, 387, 387, 80, 79, 817, 1277, 716, 1050,
	603, 604, 1235, 1073, 1045, 813, 780, 50, 965, 717,
	719, 720, 721, 475, 723, 724, 725, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 1043, 591, 1229, 1009,
	215, 922, 564, 612, 1140, 467, 479, 479, 581, 682,
	563, 591, 30, 31, 32, 1344, 34, 171, 1400, 566,
	1363, 569, 810, 808, 804, 1227, 807, 809, 35, 47,
	39, 1322, 1374, 48, 49, 33, 567, 987, 988, 744,
	937, 744, 83, 400, 93, 91, 1010, 81, 921, 88,
	477, 714, 569, 975, 1141, 1171, 1387, 568, 567, 1370,
	983, 984, 99, 68, 1187, 812, 894, 99, 99, 99,
	1185, 482, 99, 537, 569, 1228, 99, 99, 851, 1173,
	84, 92, 86, 87, 90, 894, 458, 1056, 811, 1024,
	1025, 1026, 849, 850, 848, 1175, 571, 1179, 1008, 1174,
	563, 1172, 1051, 541, 542, 544, 1177, 639, 640, 826,
	970, 462, 550, 551, 1401, 358, 1176, 582, 583, 584,
	585, 586, 587, 588, 581, 397, 455, 591, 53, 1178,
	1180, 584, 585, 586, 587, 588, 581, 52, 847, 591,
	570, 1361, 1331, 568, 567, 1385, 601, 806, 1222, 568,
	567, 1289, 568, 567, 38, 1290, 568, 567, 816, 555,
	569, 40, 1125, 1221, 41, 42, 569, 44, 43, 569,
	220, 805, 351, 569, 1102, 99, 1101, 1123, 99, 1121,
	220, 981, 45, 982, 837, 839, 840, 600, 602, 658,
	838, 1362, 1124, 825, 361, 641, 1100, 868, 350, 869,
	653, 419, 418, 420, 421, 422, 423, 1122, 1097, 1120,
	424, 655, 1092, 611, 1104, 663, 614, 615, 616, 617,
	618, 619, 620, 661, 623, 625, 625, 625, 625, 625,
	625, 625, 625, 633, 634, 635, 636, 1091, 775, 776,
	777, 778, 737, 643, 1103, 356, 642, 1090, 998, 654,
	669, 997, 645, 785, 786, 787, 991, 99, 677, 659,
	384, 1302, 215, 794, 99, 99, 668, 781, 782, 783,
	683, 1220, 1210, 99, 626, 627, 628, 629, 630, 631,
	632, 1209, 1105, 1098, 1094, 1093, 845, 820, 1258, 1261,
	1262, 1263, 1259, 819, 1260, 1264, 1085, 1018, 1348, 1017,
	827, 828, 798, 996, 1225, 978, 1407, 393, 74, 832,
	790, 791, 1356, 1354, 393, 1282, 1337, 393, 846, 1282,
	1336, 220, 1282, 1333, 1338, 560, 1254, 393, 1347, 1296,
	1157, 1224, 1282, 393, 220, 1282, 1286, 572, 1154, 881,
	1133, 1106, 1282, 1285, 1282, 1281, 1037, 393, 831, 1146,
	1145, 885, 1143, 1142, 57, 1132, 1129, 1099, 1072, 393,
	883, 966, 931, 870, 914, 220, 540, 539, 560, 830,
	393, 199, 911, 538, 658, 622, 360, 886, 887, 1292,
	220, 890, 24, 871, 872, 898, 487, 486, 50, 1291,
	919, 916, 1139, 891, 350, 897, 24, 899, 900, 667,
	614, 1037, 884, 873, 910, 215, 920, 923, 901, 1065,
	908, 902, 830, 651, 896, 680, 895, 652, 580, 579,
	589, 590, 582, 583, 584, 585, 586, 587, 588, 581,
	920, 1199, 591, 1068, 1254, 1144, 53, 53, 915, 1037,
	50, 932, 926, 925, 659, 475, 818, 918, 24, 920,
	53, 935, 605, 606, 607, 608, 609, 610, 1032, 673,
	1037, 671, 215, 637, 469, 774, 793, 1219, 1218, 1217,
	933, 934, 1214, 938, 67, 943, 944, 945, 946, 947,
	1131, 1130, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 1108, 1107, 1258, 1261, 1262,
	1263, 1259, 53, 1260, 1264, 834, 835, 1128, 841, 842,
	1160, 99, 99, 99, 964, 969, 967, 968, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 99,
	580, 579, 589, 590, 582, 583, 584, 585, 586, 587,
	588, 581, 992, 993, 591, 192, 789, 1002, 1003, 1004,
	784, 910, 560, 802, 801, 888, 889, 800, 546, 1001,
	845, 999, 798, 1314, 1312, 1015, 649, 1006, 1315, 1313,
	1316, 1350, 1262, 1263, 1349, 455, 579, 589, 590, 582,
	583, 584, 585, 586, 587, 588, 581, 1311, 1020, 591,
	220, 1310, 846, 22, 196, 197, 1405, 1393, 1023, 53,
	1027, 833, 461, 1383, 907, 924, 906, 1233, 1089, 994,
	799, 483, 466, 736, 99, 395, 459, 843, 1066, 1391,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 396, 545, 1036, 1390, 1266,
	193, 194, 461, 658, 350, 350, 1055, 1197, 977, 1077,
	1063, 976, 190, 1053, 963, 187, 1392, 1404, 905, 1034,
	1074, 1305, 1078, 1035, 1067, 485, 904, 1044, 1086, 484,
	883, 188, 1041, 1127, 1046, 1047, 1048, 1075, 57, 1052,
	1304, 1253, 667, 553, 1058, 554, 1059, 1060, 1061, 1062,
	549, 1083, 1084, 202, 1274, 979, 565, 59, 1087, 1088,
	61, 54, 1, 341, 1069, 1070, 1071, 1095, 1096, 1033,
	1328, 796, 795, 659, 747, 215, 746, 99, 1386, 69,
	1358, 1082, 1389, 1360, 1368, 350, 687, 686, 346, 580,
	579, 589, 590, 582, 583, 584, 585, 586, 587, 588,
	581, 738, 995, 591, 753, 752, 751, 428, 749, 989,
	771, 220, 1226, 1152, 758, 757, 220, 681, 712, 1147,
	1148, 711, 1156, 710, 1019, 709, 708, 707, 1021, 1158,
	881, 706, 1169, 1159, 705, 704, 99, 1164, 703, 702,
	914, 701, 700, 220, 220, 97, 1165, 1182, 1149, 1150,
	1151, 883, 1181, 699, 1184, 1168, 698, 697, 1188, 1167,
	1189, 1198, 696, 695, 694, 693, 689, 692, 1200, 1194,
	691, 201, 1279, 1204, 690, 756, 754, 1207, 1208, 750,
	492, 490, 491, 489, 494, 1163, 493, 201, 201, 488,
	1265, 1269, 1057, 1041, 1038, 1007, 215, 803, 215, 220,
	599, 220, 220, 903, 201, 1135, 213, 927, 672, 670,
	204, 1195, 203, 560, 915, 917, 638, 1201, 453, 1076,
	220, 220, 220, 1303, 1252, 1202, 1203, 1054, 621, 892,
	406, 836, 1205, 1206, 580, 579, 589, 590, 582, 583,
	584, 585, 586, 587, 588, 581, 417, 414, 591, 416,
	415, 644, 650, 1028, 1029, 1030, 573, 404, 398, 1320,
	1193, 543, 370, 1241, 85, 463, 99, 99, 1257, 1255,
	1192, 914, 1064, 548, 1238, 1239, 1249, 1240, 1342, 648,
	1242, 1213, 1244, 1213, 1213, 220, 755, 201, 220, 220,
	1275, 1134, 25, 58, 198, 14, 21, 15, 1276, 1194,
	13, 12, 1213, 1213, 1213, 29, 220, 201, 10, 9,
	201, 8, 7, 6, 5, 4, 1283, 1236, 189, 1237,
	23, 2, 1169, 20, 19, 99, 99, 99, 99, 1248,
	1246, 1247, 18, 17, 16, 11, 99, 0, 1306, 99,
	1308, 1268, 99, 0, 1307, 915, 1309, 50, 220, 0,
	1317, 1278, 0, 220, 1186, 1325, 0, 658, 1194, 1194,
	1194, 1194, 1332, 1324, 0, 885, 1298, 1213, 1335, 0,
	1213, 1213, 1194, 1215, 1216, 1339, 0, 0, 0, 1293,
	1294, 1295, 0, 1346, 0, 0, 0, 0, 215, 0,
	0, 0, 1230, 1231, 1232, 0, 0, 0, 1301, 0,
	1195, 1195, 1195, 1195, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1365, 1268, 1357, 1319, 1369, 1372, 1367,
	1371, 1364, 0, 0, 0, 1326, 0, 659, 0, 1382,
	1327, 0, 0, 0, 0, 1213, 1161, 1162, 0, 0,
	0, 1369, 1372, 0, 0, 0, 0, 0, 0, 0,
	220, 220, 220, 0, 1398, 1399, 0, 1284, 0, 536,
	1287, 1288, 0, 0, 201, 201, 201, 0, 0, 547,
	0, 0, 1410, 201, 201, 1411, 1412, 1355, 220, 0,
	1384, 0, 765, 764, 0, 1251, 0, 0, 0, 0,
	0, 1373, 761, 0, 0, 0, 0, 1379, 1380, 1381,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1402,
	1403, 0, 0, 0, 0, 767, 0, 0, 589, 590,
	582, 583, 584, 585, 586, 587, 588, 581, 766, 759,
	591, 0, 1397, 1397, 1397, 760, 168, 0, 0, 0,
	0, 0, 0, 0, 0, 1406, 387, 1408, 1409, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1414, 0, 0, 0, 1234, 0, 0, 0, 768, 0,
	0, 0, 201, 0, 660, 662, 169, 0, 172, 0,
	174, 175, 0, 181, 182, 183, 184, 0, 763, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	367, 368, 0, 373, 374, 375, 0, 377, 378, 379,
	380, 381, 0, 0, 497, 0, 0, 0, 0, 0,
	0, 762, 0, 0, 0, 1377, 1378, 0, 770, 0,
	0, 769, 1300, 0, 201, 0, 0, 0, 509, 0,
	0, 201, 201, 522, 525, 526, 527, 528, 529, 530,
	201, 531, 532, 533, 534, 535, 510, 511, 512, 513,
	495, 496, 523, 0, 498, 0, 0, 499, 500, 501,
	502, 503, 504, 505, 506, 507, 508, 514, 515, 516,
	517, 518, 519, 520, 521, 0, 0, 383, 0, 0,
	385, 0, 0, 0, 0, 389, 0, 391, 0, 880,
	662, 0, 0, 880, 880, 0, 0, 880, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 880, 880, 880, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 880, 0, 0, 660,
	0, 0, 0, 0, 575, 0, 578, 0, 0, 0,
	0, 524, 592, 593, 594, 595, 596, 597, 598, 0,
	576, 577, 574, 580, 579, 589, 590, 582, 583, 584,
	585, 586, 587, 588, 581, 0, 0, 591, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 0, 101, 0, 125, 131, 0, 0, 0,
	0, 0, 0, 875, 0, 402, 0, 0, 0, 117,
	401, 0, 0, 0, 0, 438, 133, 0, 0, 151,
	136, 0, 0, 0, 0, 431, 432, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 451, 419, 418,
	420, 421, 422, 423, 0, 0, 107, 424, 425, 426,
	0, 0, 0, 399, 412, 0, 437, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 201, 201,
	201, 0, 0, 0, 0, 0, 409, 410, 878, 556,
	0, 557, 449, 558, 411, 561, 201, 408, 413, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 0, 0, 447, 0, 0, 0, 0, 0,
	0, 111, 0, 149, 0, 159, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 124, 0, 0, 157,
	158, 112, 162, 0, 0, 104, 0, 0, 142, 0,
	156, 0, 0, 880, 0, 0, 0, 0, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 0, 880,
	0, 152, 0, 0, 123, 118, 155, 115, 137, 108,
	102, 201, 109, 110, 114, 113, 0, 129, 135, 138,
	144, 145, 150, 0, 0, 0, 0, 0, 660, 0,
	662, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 122, 439, 448,
	445, 446, 443, 444, 442, 441, 440, 450, 433, 434,
	436, 0, 435, 100, 105, 132, 0, 148, 121, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 153, 0, 0, 0, 822, 823, 128,
	0, 0, 829, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 163, 164, 166, 165, 167, 106, 0, 0,
	0, 0, 0, 0, 201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 880, 0, 0, 0, 0,
	0, 662, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 1272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1005, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1016, 0, 0,
	0, 0, 201, 201, 201, 201, 0, 0, 0, 1022,
	0, 0, 0, 1318, 0, 0, 201, 0, 0, 1272,
	0, 0, 660, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 309, 269, 327, 245, 260, 339, 262, 263, 299,
	229, 279, 143, 258, 101, 0, 125, 131, 0, 0,
	0, 325, 276, 0, 248, 222, 255, 223, 246, 273,
	117, 244, 311, 282, 261, 0, 333, 133, 291, 0,
	151, 136, 0, 0, 275, 314, 277, 308, 268, 300,
	237, 290, 328, 259, 296, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 293, 322,
	257, 295, 298, 221, 292, 0, 225, 230, 338, 320,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 274,
	278, 305, 266, 0, 0, 0, 0, 0, 0, 0,
	0, 249, 0, 289, 0, 0, 0, 232, 227, 272,
	0, 0, 0, 236, 0, 250, 306, 0, 0, 0,
	315, 267, 161, 321, 265, 264, 329, 302, 0, 312,
	247, 256, 111, 254, 149, 297, 159, 103, 318, 313,
	287, 270, 271, 226, 1153, 304, 116, 124, 243, 294,
	157, 158, 112, 162, 231, 335, 104, 218, 334, 142,
	217, 156, 319, 288, 284, 228, 317, 286, 283, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	224, 0, 152, 326, 340, 123, 118, 155, 115, 137,
	108, 102, 234, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 242,
	316, 0, 0, 0, 0, 0, 154, 233, 122, 240,
	241, 238, 239, 280, 281, 330, 331, 332, 307, 235,
	0, 0, 310, 285, 100, 105, 132, 337, 148, 121,
	160, 0, 0, 0, 0, 0, 0, 253, 336, 303,
	301, 323, 0, 120, 153, 0, 0, 206, 0, 0,
	211, 209, 210, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 163, 164, 166, 165, 167, 106, 324,
	309, 269, 327, 245, 260, 339, 262, 263, 299, 229,
	279, 143, 258, 101, 0, 125, 131, 0, 0, 0,
	325, 276, 0, 248, 222, 255, 223, 246, 273, 117,
	244, 311, 282, 261, 0, 333, 133, 291, 0, 151,
	136, 0, 0, 275, 314, 277, 308, 268, 300, 237,
	290, 328, 259, 296, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 293, 322, 257,
	295, 298, 221, 292, 0, 225, 230, 338, 320, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 274, 278,
	305, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	249, 0, 289, 0, 0, 0, 232, 227, 272, 0,
	0, 0, 236, 0, 250, 306, 0, 0, 0, 315,
	267, 161, 321, 265, 264, 329, 302, 0, 312, 247,
	256, 111, 254, 149, 297, 159, 103, 318, 313, 287,
	270, 271, 226, 0, 304, 116, 124, 243, 294, 157,
	158, 112, 162, 231, 335, 104, 218, 334, 142, 217,
	156, 319, 288, 284, 228, 317, 286, 283, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 0, 224,
	0, 152, 326, 340, 123, 118, 155, 115, 137, 108,
	102, 234, 109, 110, 114, 113, 0, 129, 135, 138,
	144, 145, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 242, 316,
	0, 0, 0, 0, 0, 154, 233, 122, 240, 241,
	238, 239, 280, 281, 330, 331, 332, 307, 235, 0,
	0, 310, 285, 100, 105, 132, 337, 148, 121, 160,
	0, 0, 0, 0, 0, 0, 253, 336, 303, 301,
	323, 0, 120, 153, 0, 0, 0, 0, 0, 211,
	209, 210, 214, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 163, 164, 166, 165, 167, 106, 324, 309,
	269, 327, 245, 260, 339, 262, 263, 299, 229, 279,
	143, 258, 101, 0, 125, 131, 0, 0, 0, 325,
	276, 0, 248, 222, 255, 223, 246, 273, 117, 244,
	311, 282, 261, 0, 333, 133, 291, 0, 151, 136,
	0, 0, 275, 314, 277, 308, 268, 300, 237, 290,
	328, 259, 296, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 293, 322, 257, 295,
	298, 221, 292, 0, 225, 230, 338, 320, 251, 252,
	0, 0, 0, 0, 0, 0, 0, 274, 278, 305,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 289, 0, 0, 0, 232, 227, 272, 0, 0,
	0, 236, 0, 250, 306, 0, 0, 0, 315, 267,
	161, 321, 265, 264, 329, 302, 0, 312, 247, 256,
	111, 254, 149, 297, 159, 103, 318, 313, 287, 270,
	271, 226, 0, 304, 116, 124, 243, 294, 157, 158,
	112, 162, 231, 335, 104, 218, 334, 142, 217, 156,
	319, 288, 284, 228, 317, 286, 283, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 224, 0,
	152, 326, 340, 123, 118, 155, 115, 137, 108, 102,
	234, 109, 110, 114, 113, 0, 129, 135, 138, 144,
	145, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 242, 316, 0,
	0, 0, 0, 0, 154, 233, 122, 240, 241, 238,
	239, 280, 281, 330, 331, 332, 307, 235, 0, 0,
	310, 285, 100, 105, 132, 337, 148, 121, 160, 0,
	0, 0, 0, 0, 0, 253, 336, 303, 301, 323,
	0, 120, 153, 0, 0, 476, 0, 0, 128, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 163, 164, 166, 165, 167, 106, 324, 309, 269,
	327, 245, 260, 339, 262, 263, 299, 229, 279, 143,
	258, 101, 0, 125, 131, 0, 0, 0, 325, 276,
	0, 248, 222, 255, 223, 246, 273, 117, 244, 311,
	282, 261, 0, 333, 133, 291, 0, 151, 136, 0,
	0, 275, 314, 277, 308, 268, 300, 237, 290, 328,
	259, 296, 0, 0, 0, 219, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 293, 322, 257, 295, 298,
	221, 292, 0, 225, 230, 338, 320, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 274, 278, 305, 266,
	0, 0, 0, 0, 0, 0, 1297, 0, 249, 0,
	289, 0, 0, 0, 232, 227, 272, 0, 0, 0,
	236, 0, 250, 306, 0, 0, 0, 315, 267, 161,
	321, 265, 264, 329, 302, 0, 312, 247, 256, 111,
	254, 149, 297, 159, 103, 318, 313, 287, 270, 271,
	226, 0, 304, 116, 124, 243, 294, 157, 158, 112,
	162, 231, 335, 104, 664, 334, 142, 665, 156, 319,
	288, 284, 228, 317, 286, 283, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 224, 0, 152,
	326, 340, 123, 118, 155, 115, 137, 108, 102, 234,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 242, 316, 0, 0,
	0, 0, 0, 154, 233, 122, 240, 241, 238, 239,
	280, 281, 330, 331, 332, 307, 235, 0, 0, 310,
	285, 100, 105, 132, 337, 148, 121, 160, 0, 0,
	0, 0, 0, 0, 253, 336, 303, 301, 323, 0,
	120, 153, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 166, 165, 167, 106, 324, 309, 269, 327,
	245, 260, 339, 262, 263, 299, 229, 279, 143, 258,
	101, 0, 125, 131, 0, 0, 0, 325, 276, 0,
	248, 222, 255, 223, 246, 273, 117, 244, 311, 282,
	261, 0, 333, 133, 291, 0, 151, 136, 0, 0,
	275, 314, 277, 308, 268, 300, 237, 290, 328, 259,
	296, 0, 0, 0, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 293, 322, 257, 295, 298, 221,
	292, 0, 225, 230, 338, 320, 251, 252, 0, 0,
	0, 0, 0, 0, 0, 274, 278, 305, 266, 0,
	0, 0, 0, 0, 0, 1166, 0, 249, 0, 289,
	0, 0, 0, 232, 227, 272, 0, 0, 0, 236,
	0, 250, 306, 0, 0, 0, 315, 267, 161, 321,
	265, 264, 329, 302, 0, 312, 247, 256, 111, 254,
	149, 297, 159, 103, 318, 313, 287, 270, 271, 226,
	0, 304, 116, 124, 243, 294, 157, 158, 112, 162,
	231, 335, 104, 664, 334, 142, 665, 156, 319, 288,
	284, 228, 317, 286, 283, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 0, 224, 0, 152, 326,
	340, 123, 118, 155, 115, 137, 108, 102, 234, 109,
	110, 114, 113, 0, 129, 135, 138, 144, 145, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 316, 0, 0, 0,
	0, 0, 154, 233, 122, 240, 241, 238, 239, 280,
	281, 330, 331, 332, 307, 235, 0, 0, 310, 285,
	100, 105, 132, 337, 148, 121, 160, 0, 0, 0,
	0, 0, 0, 253, 336, 303, 301, 323, 0, 120,
	153, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	164, 166, 165, 167, 106, 324, 309, 269, 327, 245,
	260, 339, 262, 263, 299, 229, 279, 143, 258, 101,
	0, 125, 131, 0, 0, 0, 325, 276, 0, 248,
	222, 255, 223, 246, 273, 117, 244, 311, 282, 261,
	0, 333, 133, 291, 0, 151, 136, 0, 0, 275,
	314, 277, 308, 268, 300, 237, 290, 328, 259, 296,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 293, 322, 257, 295, 298, 221, 292,
	0, 225, 230, 338, 320, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 274, 278, 305, 266, 0, 0,
	0, 0, 0, 0, 0, 0, 249, 0, 289, 0,
	0, 0, 232, 227, 272, 0, 0, 0, 236, 0,
	250, 306, 0, 0, 0, 315, 267, 161, 321, 265,
	264, 329, 302, 0, 312, 247, 256, 111, 254, 149,
	297, 159, 103, 318, 313, 287, 270, 271, 226, 0,
	304, 116, 124, 243, 294, 157, 158, 112, 162, 231,
	335, 104, 218, 334, 142, 217, 156, 319, 288, 284,
	228, 317, 286, 283, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 0, 224, 0, 152, 326, 340,
	123, 118, 155, 115, 137, 108, 102, 234, 109, 110,
	114, 113, 0, 129, 135, 138, 144, 145, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 242, 316, 0, 0, 0, 0,
	0, 154, 233, 122, 240, 241, 238, 239, 280, 281,
	330, 331, 332, 307, 235, 0, 0, 310, 285, 100,
	105, 132, 337, 148, 121, 160, 0, 0, 0, 0,
	0, 0, 253, 336, 303, 301, 323, 0, 120, 153,
	0, 0, 0, 0, 0, 128, 0, 0, 214, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 163, 164,
	166, 165, 167, 106, 324, 309, 269, 327, 245, 260,
	339, 262, 263, 299, 229, 279, 143, 258, 101, 0,
	125, 131, 0, 0, 0, 325, 276, 0, 248, 222,
	255, 223, 246, 273, 117, 244, 311, 282, 261, 0,
	333, 133, 291, 0, 151, 136, 0, 0, 275, 314,
	277, 308, 268, 300, 237, 290, 328, 259, 296, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 293, 322, 257, 295, 298, 221, 292, 0,
	225, 230, 338, 320, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 274, 278, 305, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 249, 0, 289, 0, 0,
	0, 232, 227, 272, 0, 0, 0, 236, 0, 250,
	306, 0, 0, 0, 315, 267, 161, 321, 265, 264,
	329, 302, 0, 312, 247, 256, 111, 254, 149, 297,
	159, 103, 318, 313, 287, 270, 271, 226, 0, 304,
	116, 124, 243, 294, 157, 158, 112, 162, 231, 335,
	104, 664, 334, 142, 665, 156, 319, 288, 284, 228,
	317, 286, 283, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 0, 224, 0, 152, 326, 340, 123,
	118, 155, 115, 137, 108, 102, 234, 109, 110, 114,
	113, 0, 129, 135, 138, 144, 145, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 242, 316, 0, 0, 0, 0, 0,
	154, 233, 122, 240, 241, 238, 239, 280, 281, 330,
	331, 332, 307, 235, 0, 0, 310, 285, 100, 105,
	132, 337, 148, 121, 160, 0, 0, 0, 0, 0,
	0, 253, 336, 303, 301, 323, 0, 120, 153, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 163, 164, 166,
	165, 167, 106, 324, 309, 269, 327, 245, 260, 339,
	262, 263, 299, 229, 279, 143, 258, 101, 0, 125,
	131, 0, 0, 0, 325, 276, 0, 248, 222, 255,
	223, 246, 273, 117, 244, 311, 282, 261, 0, 333,
	133, 291, 0, 151, 136, 0, 0, 275, 314, 277,
	308, 268, 300, 237, 290, 328, 259, 296, 0, 0,
	0, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 293, 322, 257, 295, 298, 221, 292, 0, 225,
	230, 338, 320, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 274, 278, 305, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 289, 0, 0, 0,
	232, 227, 272, 0, 0, 0, 236, 0, 250, 306,
	0, 0, 0, 315, 267, 161, 321, 265, 264, 329,
	302, 0, 312, 247, 256, 111, 254, 149, 297, 159,
	103, 318, 313, 287, 270, 271, 226, 0, 304, 116,
	124, 243, 294, 157, 158, 112, 162, 231, 335, 104,
	664, 334, 142, 665, 156, 319, 288, 284, 228, 317,
	286, 283, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 224, 0, 152, 326, 340, 123, 118,
	155, 115, 137, 108, 102, 234, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 242, 316, 0, 0, 0, 0, 0, 154,
	233, 122, 240, 241, 238, 239, 280, 281, 330, 331,
	332, 307, 235, 0, 0, 310, 285, 100, 105, 132,
	337, 148, 121, 160, 0, 0, 0, 0, 0, 0,
	253, 336, 303, 301, 323, 0, 120, 153, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 164, 166, 165,
	167, 106, 324, 309, 269, 327, 245, 260, 339, 262,
	263, 299, 229, 279, 143, 258, 101, 0, 125, 131,
	0, 0, 0, 325, 276, 0, 248, 222, 255, 223,
	246, 273, 117, 244, 311, 282, 261, 0, 333, 133,
	291, 0, 151, 136, 0, 0, 275, 314, 277, 308,
	268, 300, 237, 290, 328, 259, 296, 0, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	293, 322, 257, 295, 298, 221, 292, 0, 225, 230,
	338, 320, 251, 252, 0, 0, 0, 0, 0, 0,
	0, 274, 278, 305, 266, 0, 0, 0, 0, 0,
	0, 0, 0, 249, 0, 289, 0, 0, 0, 232,
	227, 272, 0, 0, 0, 236, 0, 250, 306, 0,
	0, 0, 315, 267, 161, 321, 265, 264, 329, 302,
	0, 312, 247, 256, 111, 254, 149, 297, 159, 103,
	318, 313, 287, 270, 271, 226, 0, 304, 116, 124,
	243, 294, 157, 158, 112, 162, 231, 335, 104, 664,
	334, 142, 665, 156, 319, 288, 284, 228, 317, 286,
	283, 130, 119, 126, 146, 134, 147, 127, 140, 139,
	141, 0, 224, 0, 152, 326, 340, 123, 118, 155,
	115, 137, 108, 102, 234, 109, 110, 114, 113, 0,
	129, 135, 138, 144, 145, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 242, 316, 0, 0, 0, 0, 0, 154, 233,
	122, 240, 241, 238, 239, 280, 281, 330, 331, 332,
	307, 235, 0, 0, 310, 285, 100, 105, 132, 337,
	148, 121, 160, 0, 0, 0, 0, 0, 0, 253,
	336, 303, 301, 323, 0, 120, 153, 0, 0, 0,
	0, 0, 128, 0, 0, 0, 0, 143, 0, 101,
	0, 125, 131, 0, 0, 163, 164, 166, 165, 167,
	106, 402, 0, 0, 0, 117, 401, 0, 0, 0,
	0, 438, 133, 0, 0, 151, 136, 0, 0, 0,
	0, 431, 432, 0, 0, 0, 0, 0, 0, 678,
	53, 0, 0, 451, 419, 418, 420, 421, 422, 423,
	0, 0, 107, 424, 425, 426, 679, 0, 0, 399,
	412, 0, 437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 409, 410, 0, 0, 0, 0, 449, 0,
	411, 0, 0, 408, 413, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 0, 0,
	447, 0, 0, 0, 0, 0, 0, 111, 0, 149,
	0, 159, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 124, 0, 0, 157, 158, 112, 162, 0,
	0, 104, 0, 0, 142, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 0, 0, 0, 152, 0, 0,
	123, 118, 155, 115, 137, 108, 102, 0, 109, 110,
	114, 113, 0, 129, 135, 138, 144, 145, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 122, 439, 448, 445, 446, 443, 444,
	442, 441, 440, 450, 433, 434, 436, 0, 435, 100,
	105, 132, 0, 148, 121, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 153,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
	143, 0, 101, 0, 125, 131, 0, 0, 163, 164,
	166, 165, 167, 106, 402, 0, 0, 0, 117, 401,
	0, 0, 0, 0, 438, 133, 0, 0, 151, 136,
	0, 0, 0, 0, 431, 432, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 451, 419, 418, 420,
	421, 422, 423, 0, 0, 107, 424, 425, 426, 0,
	0, 0, 399, 412, 0, 437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 409, 410, 878, 0, 0,
	0, 449, 0, 411, 0, 0, 408, 413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	161, 0, 0, 447, 0, 0, 0, 0, 0, 0,
	111, 0, 149, 0, 159, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 124, 0, 0, 157, 158,
	112, 162, 0, 0, 104, 0, 0, 142, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 0, 0,
	152, 0, 0, 123, 118, 155, 115, 137, 108, 102,
	0, 109, 110, 114, 113, 0, 129, 135, 138, 144,
	145, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 122, 439, 448, 445,
	446, 443, 444, 442, 441, 440, 450, 433, 434, 436,
	0, 435, 100, 105, 132, 0, 148, 121, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 153, 0, 0, 0, 0, 0, 128, 0,
	0, 0, 0, 143, 0, 101, 0, 125, 131, 0,
	0, 163, 164, 166, 165, 167, 106, 402, 0, 0,
	0, 117, 401, 0, 0, 0, 0, 438, 133, 0,
	0, 151, 136, 0, 0, 0, 0, 431, 432, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 393, 451,
	419, 418, 420, 421, 422, 423, 0, 0, 107, 424,
	425, 426, 0, 0, 0, 399, 412, 0, 437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 409, 410,
	0, 0, 0, 0, 449, 0, 411, 0, 0, 408,
	413, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 0, 0, 447, 0, 0, 0,
	0, 0, 0, 111, 0, 149, 0, 159, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 124, 0,
	0, 157, 158, 112, 162, 0, 0, 104, 0, 0,
	142, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	0, 0, 0, 152, 0, 0, 123, 118, 155, 115,
	137, 108, 102, 0, 109, 110, 114, 113, 0, 129,
	135, 138, 144, 145, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 122,
	439, 448, 445, 446, 443, 444, 442, 441, 440, 450,
	433, 434, 436, 0, 435, 100, 105, 132, 0, 148,
	121, 160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 153, 24, 0, 0, 0,
	0, 128, 0, 0, 0, 0, 0, 143, 0, 101,
	0, 125, 131, 0, 163, 164, 166, 165, 167, 106,
	0, 402, 0, 0, 0, 117, 401, 0, 0, 0,
	0, 438, 133, 0, 0, 151, 136, 0, 0, 0,
	0, 431, 432, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 451, 419, 418, 420, 421, 422, 423,
	0, 0, 107, 424, 425, 426, 0, 0, 0, 399,
	412, 0, 437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 409, 410, 0, 0, 0, 0, 449, 0,
	411, 0, 0, 408, 413, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 0, 0,
	447, 0, 0, 0, 0, 0, 0, 111, 0, 149,
	0, 159, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 124, 0, 0, 157, 158, 112, 162, 0,
	0, 104, 0, 0, 142, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 0, 0, 0, 152, 0, 0,
	123, 118, 155, 115, 137, 108, 102, 0, 109, 110,
	114, 113, 0, 129, 135, 138, 144, 145, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 122, 439, 448, 445, 446, 443, 444,
	442, 441, 440, 450, 433, 434, 436, 0, 435, 100,
	105, 132, 0, 148, 121, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 153,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
	143, 0, 101, 0, 125, 131, 0, 0, 163, 164,
	166, 165, 167, 106, 402, 0, 0, 0, 117, 401,
	0, 0, 0, 0, 438, 133, 0, 0, 151, 136,
	0, 0, 0, 0, 431, 432, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 451, 419, 418, 420,
	421, 422, 423, 0, 0, 107, 424, 425, 426, 0,
	0, 0, 399, 412, 0, 437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 409, 410, 0, 0, 0,
	0, 449, 0, 411, 0, 0, 408, 413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	161, 0, 0, 447, 0, 0, 0, 0, 0, 0,
	111, 0, 149, 0, 159, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 124, 0, 0, 157, 158,
	112, 162, 0, 0, 104, 0, 0, 142, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 0, 0,
	152, 0, 0, 123, 118, 155, 115, 137, 108, 102,
	0, 109, 110, 114, 113, 0, 129, 135, 138, 144,
	145, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 122, 439, 448, 445,
	446, 443, 444, 442, 441, 440, 450, 433, 434, 436,
	0, 435, 100, 105, 132, 0, 148, 121, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 153, 0, 0, 0, 0, 0, 128, 143,
	0, 101, 0, 125, 131, 0, 0, 0, 0, 0,
	0, 163, 164, 166, 165, 167, 106, 117, 0, 0,
	0, 0, 0, 438, 133, 0, 0, 151, 136, 0,
	0, 0, 0, 431, 432, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 451, 419, 418, 420, 421,
	422, 423, 0, 0, 107, 424, 425, 426, 0, 0,
	0, 0, 412, 0, 437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 409, 410, 0, 0, 0, 0,
	449, 0, 411, 0, 0, 408, 413, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	0, 0, 447, 0, 0, 0, 0, 0, 0, 111,
	0, 149, 0, 159, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 157, 158, 112,
	162, 0, 0, 104, 0, 0, 142, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 0, 0, 152,
	0, 0, 123, 118, 155, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 122, 439, 448, 445, 446,
	443, 444, 442, 441, 440, 450, 433, 434, 436, 0,
	435, 100, 105, 132, 0, 148, 121, 160, 143, 0,
	101, 0, 125, 131, 0, 0, 0, 0, 0, 0,
	120, 153, 0, 0, 0, 0, 117, 128, 0, 0,
	0, 0, 0, 133, 0, 0, 151, 136, 0, 0,
	163, 164, 166, 165, 167, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 580,
	579, 589, 590, 582, 583, 584, 585, 586, 587, 588,
	581, 0, 0, 591, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	149, 0, 159, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 124, 0, 0, 157, 158, 112, 162,
	0, 0, 104, 0, 0, 142, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 143, 0, 101, 152, 125,
	131, 123, 118, 155, 115, 137, 108, 102, 1040, 109,
	110, 114, 113, 117, 129, 135, 138, 144, 145, 150,
	133, 0, 0, 151, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 154, 1042, 122, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 568, 567, 0, 0, 0,
	100, 105, 132, 0, 148, 121, 160, 0, 0, 0,
	0, 0, 569, 0, 0, 0, 0, 0, 0, 120,
	153, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	164, 166, 165, 167, 106, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 159,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 157, 158, 112, 162, 0, 0, 104,
	0, 0, 142, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 0, 0, 152, 0, 0, 123, 118,
	155, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 143, 0,
	101, 0, 742, 131, 0, 0, 743, 740, 745, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 154,
	0, 122, 0, 133, 0, 0, 151, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 105, 132,
	0, 148, 121, 160, 349, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 120, 153, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 164, 166, 165,
	167, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 744, 161, 0,
	0, 0, 0, 739, 0, 0, 0, 0, 111, 0,
	149, 0, 159, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 124, 0, 0, 157, 158, 112, 162,
	0, 0, 104, 0, 0, 142, 0, 156, 0, 0,
	0, 0, 0, 0, 24, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 143, 0, 101, 152, 125,
	131, 123, 118, 155, 115, 137, 108, 102, 0, 109,
	110, 114, 113, 117, 129, 135, 138, 144, 145, 150,
	133, 0, 0, 151, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 98, 154, 0, 122, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 105, 132, 0, 148, 121, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	153, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	164, 166, 165, 167, 106, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 159,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 157, 158, 112, 162, 0, 0, 104,
	0, 0, 142, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 143, 0, 101, 152, 125, 131, 123, 118,
	155, 115, 137, 108, 102, 1271, 109, 110, 114, 113,
	117, 129, 135, 138, 144, 145, 150, 133, 0, 0,
	151, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 154,
	1273, 122, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 105, 132,
	0, 148, 121, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 153, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 164, 166, 165,
	167, 106, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 159, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	157, 158, 112, 162, 0, 0, 104, 0, 0, 142,
	0, 156, 0, 0, 0, 0, 0, 0, 24, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 143,
	0, 101, 152, 125, 131, 123, 118, 155, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 117, 129, 135,
	138, 144, 145, 150, 133, 0, 0, 151, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 219, 154, 0, 122, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 105, 132, 0, 148, 121,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 153, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 163, 164, 166, 165, 167, 106, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 149, 0, 159, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 157, 158, 112,
	162, 0, 0, 104, 0, 0, 142, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 0, 0, 152,
	0, 0, 123, 118, 155, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 143, 0, 101, 0, 125, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 154, 0, 122, 0, 133, 0, 0,
	151, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 105, 132, 0, 148, 121, 160, 219, 0,
	0, 646, 0, 0, 647, 0, 0, 107, 0, 0,
	120, 153, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 166, 165, 167, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 159, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	157, 158, 112, 162, 0, 0, 104, 0, 0, 142,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	0, 0, 152, 0, 0, 123, 118, 155, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 143, 0, 101, 0, 125,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 481, 0, 154, 0, 122, 0,
	133, 0, 0, 151, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 105, 132, 0, 148, 121,
	160, 219, 0, 480, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 120, 153, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 163, 164, 166, 165, 167, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 159,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 157, 158, 112, 162, 0, 0, 104,
	0, 0, 142, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 143, 0, 101, 152, 125, 131, 123, 118,
	155, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	117, 129, 135, 138, 144, 145, 150, 133, 0, 0,
	151, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 154,
	1273, 122, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 105, 132,
	0, 148, 121, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 153, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 164, 166, 165,
	167, 106, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 159, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	157, 158, 112, 162, 0, 0, 104, 0, 0, 142,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 143,
	0, 101, 152, 125, 131, 123, 118, 155, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 117, 129, 135,
	138, 144, 145, 150, 133, 0, 0, 151, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 98, 154, 0, 122, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 105, 132, 0, 148, 121,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 153, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 163, 164, 166, 165, 167, 106, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 149, 0, 159, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 157, 158, 112,
	162, 0, 0, 104, 0, 0, 142, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 143, 0, 101, 152,
	125, 131, 123, 118, 155, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 117, 129, 135, 138, 144, 145,
	150, 133, 0, 0, 151, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 154, 1042, 122, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 105, 132, 0, 148, 121, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 153, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 166, 165, 167, 106, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 149, 0,
	159, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 124, 0, 0, 157, 158, 112, 162, 0, 0,
	104, 0, 0, 142, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 0, 0, 0, 152, 0, 0, 123,
	118, 155, 115, 137, 108, 102, 0, 109, 110, 114,
	113, 0, 129, 135, 138, 144, 145, 150, 0, 143,
	0, 101, 0, 125, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 464, 117, 0, 0,
	154, 0, 122, 0, 133, 0, 0, 151, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 105,
	132, 0, 148, 121, 160, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 120, 153, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 163, 164, 166,
	165, 167, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 149, 0, 159, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 157, 158, 112,
	162, 0, 0, 104, 0, 0, 142, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 143, 0, 101, 152,
	125, 131, 123, 118, 155, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 117, 129, 135, 138, 144, 145,
	150, 133, 0, 0, 151, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 154, 0, 122, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 105, 132, 0, 148, 121, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 153, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 166, 165, 167, 106, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 149, 0,
	159, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 124, 0, 0, 157, 158, 112, 162, 0, 0,
	104, 0, 0, 142, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 143, 0, 101, 152, 125, 131, 123,
	118, 155, 115, 137, 108, 102, 0, 109, 110, 114,
	113, 117, 129, 135, 138, 144, 145, 150, 133, 0,
	0, 151, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 451,
	154, 0, 122, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 105,
	132, 0, 148, 121, 160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 153, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 163, 164, 166,
	165, 167, 106, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 149, 0, 159, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 124, 0,
	0, 157, 158, 112, 162, 0, 0, 104, 0, 0,
	142, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	143, 0, 101, 152, 125, 131, 123, 118, 155, 115,
	137, 108, 102, 0, 109, 110, 114, 113, 117, 129,
	135, 138, 144, 145, 150, 133, 0, 0, 151, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 154, 0, 122,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 105, 132, 0, 148,
	121, 160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 153, 0, 0, 0, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 163, 164, 166, 165, 167, 106,
	161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 149, 0, 159, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 124, 0, 0, 157, 158,
	112, 162, 0, 0, 104, 0, 0, 142, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 143, 0, 101,
	152, 125, 131, 123, 118, 155, 115, 137, 108, 102,
	0, 109, 110, 114, 113, 117, 129, 135, 138, 144,
	145, 150, 133, 0, 0, 151, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 349, 154, 0, 122, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 105, 132, 0, 148, 121, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 153, 0, 0, 0, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 163, 164, 166, 165, 167, 106, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 149,
	0, 159, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 124, 0, 0, 157, 158, 112, 162, 0,
	0, 104, 0, 0, 142, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 143, 0, 101, 152, 125, 131,
	123, 118, 155, 115, 137, 108, 102, 0, 109, 110,
	114, 113, 117, 129, 135, 138, 144, 145, 150, 133,
	0, 0, 151, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1126, 154, 0, 122, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	105, 132, 0, 148, 121, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 153,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 163, 164,
	166, 165, 167, 106, 161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 149, 0, 159, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 124,
	0, 0, 157, 158, 112, 162, 0, 0, 104, 0,
	0, 142, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 130, 119, 126, 146, 134, 147, 127, 140, 139,
	141, 0, 0, 0, 152, 0, 0, 123, 118, 155,
	115, 137, 108, 102, 0, 109, 110, 114, 113, 0,
	129, 135, 138, 144, 145, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 105, 132, 0,
	148, 121, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 153, 0, 0, 0,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 163, 164, 166, 165, 167,
	106,
}
var yyPact = [...]int{

	184, -1000, -221, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 954, 982, -1000, -1000, -1000, -1000, -1000, 704,
	118, 84, 12, 130, 129, 108, 110, 8893, -1000, -1000,
	54, -1000, -168, -1000, -1000, -202, -1000, -1000, -1000, -1000,
	732, -1000, -1000, -1000, -1000, -1000, 929, 946, 829, 902,
	837, -1000, 84, 8893, 973, 2325, -151, 9060, 74, 122,
	120, 119, 74, -1000, 98, -1000, 68, 603, 68, 8893,
	8893, -86, 7, -1000, -1000, -48, -1000, -1000, -1000, -91,
	-1000, -1000, -1000, -1000, -1000, -1000, 8893, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 484, -1000, -1000, -1000, -1000, 667, 667, -1000, 8893,
	-1000, -1000, -1000, -1000, -1000, 545, 887, 5953, 5953, 954,
	-1000, 732, -1000, -1000, -1000, 863, -1000, -1000, 330, 8392,
	865, 180, 8893, 693, -1000, -1000, -187, 2903, -1000, -1000,
	-1000, -1000, 253, 7698, 7698, -1000, -1000, -1000, 864, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 944, 940, 615, -1000, 1451, -1000,
	-1000, 8893, 284, 600, 594, 593, 8893, 8893, 8893, 895,
	789, 8893, -1000, -1000, 970, 8893, 8893, -1000, -1000, 963,
	965, -1000, -1000, -1000, -1000, -1000, 963, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5953, -1000, -1000,
	172, -1000, -1000, -1000, -1000, 978, 212, 369, -1000, 5953,
	1615, 667, 667, -1000, -1000, 144, -1000, -1000, 6212, 6212,
	6212, 6212, 6212, 6212, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 667, 178, -1000,
	5690, 667, 667, 667, 667, 667, 667, 5953, 667, 667,
	667, 667, 667, 667, 667, 667, 667, 667, 667, 667,
	667, -1000, -1000, 692, -1000, 365, 929, 545, 837, 7505,
	806, -1000, -1000, 666, 8893, -1000, 8726, 4637, 961, 2614,
	-1000, 690, 688, -177, -181, -1000, -187, 4900, -1000, -1000,
	-1000, -1000, 187, -1000, 667, -152, 73, 6811, 1386, -22,
	-1000, -1000, -1000, 695, -1000, 695, 695, 695, 695, 11,
	11, 11, 11, -1000, -1000, -1000, -1000, -1000, 780, -1000,
	695, 695, 695, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 776, 776, 776, 696, 696, 867, 869, 788, 785,
	784, -1000, 193, 675, -1000, -1000, 8893, -1000, 929, -89,
	-1000, -1000, 388, 8893, 8893, -1000, -1000, -1000, -1000, 598,
	356, -1000, 8893, -1000, -1000, -1000, 846, 5953, 5953, 401,
	5953, 5953, 217, 6212, 358, 287, 6212, 6212, 6212, 6212,
	6212, 6212, 6212, 6212, 6212, 6212, 6212, 6212, 6212, 6212,
	6212, 424, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	590, -1000, 732, 427, 427, 175, 175, 175, 175, 175,
	6451, 1744, 4348, 545, 5690, 5163, 5163, 5953, 5953, 5163,
	903, 273, 356, 8559, -1000, 545, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5163, 5163, 5163, 5163, 5953, -1000, -1000,
	-1000, 887, -1000, 903, 938, -1000, 855, 853, 5163, -1000,
	782, 8726, 667, -1000, 7312, -1000, 678, -1000, 251, -1000,
	176, -1000, -1000, -1000, -1000, -1000, 954, 5953, -1000, 3770,
	-1000, -183, -1000, -200, -188, -1000, -1000, -1000, -1000, -1000,
	356, -1000, 589, 9060, 667, 667, -1000, 73, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 243, 243, 75, 243, 243, 243, 243,
	243, -37, -51, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, -1000, -1000, -1000, 917,
	205, 588, 203, 203, -1000, -1000, -1000, 1386, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	327, 109, -1000, 914, -1000, 911, 530, 977, 408, 160,
	134, -25, -1000, -1000, 480, 11, 11, -1000, -1000, -1000,
	862, -1000, -1000, -1000, 528, -1000, -1000, -1000, -1000, 475,
	-1000, -1000, -1000, 472, -1000, -1000, 867, -1000, 69, -1000,
	8893, 8893, 8893, -1000, 262, 249, 91, 64, 62, 61,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8893, -1000,
	-1000, 524, -1000, -1000, -1000, 522, 5953, -1000, 388, -1000,
	5953, -1000, -1000, 842, 217, 248, -1000, -1000, 306, -1000,
	-1000, 356, 356, 1066, -1000, -1000, -1000, -1000, 358, 6212,
	6212, 6212, 610, 1066, 921, 1348, 767, 175, 317, 317,
	189, 189, 189, 189, 189, 305, 305, -1000, -1000, -1000,
	545, -1000, -1000, -1000, 545, 5163, 668, -1000, -1000, 6618,
	171, 667, 149, -1000, -1000, 545, 575, 575, 128, 362,
	575, 5163, 292, -1000, 5953, 545, -1000, 575, 545, 575,
	575, -1000, -1000, 8893, -1000, -1000, -1000, -1000, 689, -1000,
	873, 635, 662, -1000, -1000, 5426, 545, 587, 148, 954,
	8726, 5953, 4348, 929, 356, -1000, -1000, -1000, -198, -201,
	-1000, -1000, 545, 9060, 9060, -1000, 521, -1000, 408, 243,
	243, -1000, 861, 471, 461, 436, 510, 509, 243, 243,
	432, 508, 584, 420, 400, 398, 468, 507, 595, 433,
	431, 416, 9227, 737, 583, 711, 710, 582, 567, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -103,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 620, -1000, -1000, 231, 581, -1000, 664, 578, -1000,
	243, 243, 667, 667, 667, -1000, 8893, -1000, -1000, -1000,
	565, 6, 704, 557, 9060, -1000, -1000, -1000, -1000, 356,
	-1000, 356, -1000, -1000, -1000, -1000, -1000, -1000, 610, 1066,
	722, -1000, 6212, 6212, -1000, -1000, 575, 5163, -1000, -1000,
	8199, -1000, -1000, 3481, 5163, 4059, -1000, -1000, -1000, 232,
	424, 232, -120, 630, 274, -1000, 5953, 270, -1000, -1000,
	-1000, -1000, -1000, -1000, 961, 8032, 910, -1000, 667, -1000,
	-1000, 680, 8559, 8559, 929, -1000, 356, -1000, -1000, -1000,
	-1000, -1000, -1000, 545, 545, -1000, -1000, 408, 408, -1000,
	-1000, -1000, -1000, -1000, -1000, 506, 497, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8559, 702,
	8559, 8559, 699, 698, -1000, 697, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 496, 387, -1000, 372, 558, 252, 8559,
	8559, 8559, -1000, -1000, -1000, 860, -1000, -1000, -1000, -1000,
	6212, 1066, 1066, -1000, -1000, -1000, -1000, 147, 545, -1000,
	545, 695, 695, -1000, 695, 696, -1000, 695, 41, 695,
	39, 545, 545, 667, -117, -1000, 356, 5953, 959, 663,
	738, -1000, -1000, -1000, 899, 6978, 7145, 976, -1000, 667,
	-1000, 732, 142, -1000, -1000, 667, -146, -1000, -1000, -1000,
	-1000, 573, -1000, 695, 8559, 571, 564, 8559, 8559, 379,
	-1000, 617, 607, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	561, 561, 561, 556, 1066, 3192, -1000, -1000, -1000, 104,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6212, 545,
	486, 356, 957, 936, 8032, 8032, 8032, 8032, -1000, 832,
	828, -1000, 805, 804, 811, 8893, -1000, 555, 6978, 192,
	-1000, 7865, -1000, -1000, 8726, 662, 545, 8559, -144, -1000,
	366, -1000, 8559, -1000, 551, -1000, -1000, 548, 544, -1000,
	552, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	53, -1000, -1000, -1000, 5953, 5953, 738, 559, 529, -1000,
	-1000, -1000, -1000, 815, -1000, 812, -1000, -1000, -1000, -1000,
	-1000, 112, 102, 99, -1000, 659, -1000, -1000, 542, -1000,
	539, -1000, -1000, -1000, 179, 179, -1000, -1000, -1000, 179,
	97, 409, 545, 72, -131, 356, 641, 5953, 5953, -1000,
	-1000, 667, 667, 667, -144, -1000, 852, 179, -1000, -1000,
	-1000, 243, 370, 88, 97, 409, 890, 890, -1000, -1000,
	922, 890, -1000, -1000, 841, -124, -139, 356, 356, 8559,
	8559, 8559, -1000, 211, 338, -1000, -1000, -1000, -1000, -1000,
	243, 243, 924, -1000, 840, -1000, 535, -1000, 535, 535,
	667, -1000, 558, 558, -1000, -127, -1000, 8559, -1000, -1000,
	-1000, -1000, -1000, -132, -1000, -140, -1000,
}
var yyPgo = [...]int{

	0, 1265, 1264, 1263, 1262, 1254, 1253, 1251, 26, 883,
	1250, 1248, 1245, 1244, 1243, 1242, 1241, 1239, 1238, 1235,
	1231, 1230, 1227, 1226, 1225, 183, 1224, 1223, 1222, 1221,
	1216, 62, 1209, 74, 1208, 1206, 1203, 34, 51, 40,
	29, 227, 1202, 24, 13, 18, 1200, 1199, 15, 1198,
	36, 1195, 72, 1194, 1192, 49, 1191, 1190, 1189, 3,
	23, 1188, 1187, 1186, 1182, 69, 333, 1181, 1180, 1179,
	1177, 1176, 1161, 41, 7, 20, 1, 22, 1160, 33,
	12, 1159, 43, 1158, 1157, 1154, 1153, 30, 1148, 60,
	1146, 28, 59, 1145, 42, 10, 46, 1142, 1140, 65,
	86, 71, 61, 1139, 58, 1138, 1137, 146, 1136, 1135,
	1133, 598, 1130, 405, 462, 1127, 52, 1125, 37, 0,
	82, 16, 35, 1124, 47, 1037, 45, 21, 1121, 1120,
	1466, 31, 70, 25, 1119, 1116, 1114, 1113, 1112, 1111,
	1110, 32, 1109, 1106, 1105, 1104, 1102, 1100, 1097, 1096,
	1095, 1094, 1093, 1092, 1087, 1086, 1083, 1072, 1071, 1069,
	1068, 1065, 1064, 1061, 1057, 1056, 1055, 1053, 1051, 1048,
	56, 1047, 1045, 1044, 19, 50, 48, 55, 1042, 1040,
	1039, 67, 17, 1038, 1036, 1035, 1034, 1032, 44, 1031,
	63, 39, 1018, 1017, 1016, 53, 9, 172, 14, 8,
	11, 5, 6, 1014, 1013, 1012, 1010, 1009, 1008, 2,
	1006, 1004, 57, 1002, 1001, 54, 4, 1000, 993, 992,
	991, 75, 78, 990, 123,
}
var yyR1 = [...]int{

	0, 219, 220, 220, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 8, 8, 8, 9, 10, 10, 11,
	11, 12, 12, 28, 28, 13, 14, 15, 15, 217,
	217, 216, 146, 146, 16, 16, 16, 16, 16, 218,
	218, 218, 218, 218, 218, 208, 208, 209, 209, 204,
	202, 202, 200, 200, 206, 206, 198, 198, 203, 203,
	201, 201, 199, 199, 205, 205, 213, 213, 214, 214,
	215, 215, 177, 177, 176, 176, 175, 175, 178, 178,
	178, 19, 191, 193, 193, 194, 194, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 148, 150, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 163, 164, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 166, 166, 167, 167, 168, 168, 169, 169, 151,
	174, 174, 149, 145, 147, 192, 192, 192, 188, 124,
	124, 134, 134, 134, 134, 210, 210, 211, 211, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 137,
	137, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	136, 136, 136, 136, 136, 138, 138, 138, 138, 138,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 140, 140, 140, 140, 140, 140,
	140, 140, 187, 187, 141, 141, 181, 181, 182, 182,
	182, 179, 179, 180, 180, 183, 183, 142, 142, 142,
	142, 142, 30, 29, 29, 29, 109, 109, 109, 184,
	170, 170, 170, 144, 171, 171, 172, 172, 172, 173,
	173, 173, 185, 185, 186, 186, 143, 189, 189, 189,
	189, 189, 189, 190, 190, 197, 197, 196, 17, 17,
	17, 17, 17, 17, 17, 17, 18, 18, 18, 56,
	56, 1, 20, 2, 3, 4, 4, 5, 5, 5,
	5, 6, 6, 6, 6, 6, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 36, 36, 52, 52, 53, 53, 54, 54,
	55, 55, 55, 24, 22, 23, 23, 23, 23, 223,
	25, 26, 26, 27, 27, 27, 33, 33, 33, 31,
	31, 32, 32, 39, 39, 38, 38, 40, 40, 40,
	40, 123, 123, 123, 122, 122, 42, 42, 43, 43,
	44, 44, 45, 45, 45, 57, 46, 46, 46, 46,
	129, 129, 128, 128, 128, 127, 127, 47, 47, 47,
	47, 48, 48, 48, 48, 49, 49, 51, 51, 50,
	50, 58, 58, 58, 58, 59, 59, 60, 60, 41,
	41, 41, 41, 41, 41, 41, 112, 112, 62, 62,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	72, 72, 72, 72, 72, 72, 63, 63, 63, 63,
	63, 63, 63, 37, 37, 73, 73, 73, 79, 74,
	74, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 70, 70, 70, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 69, 69, 69, 69, 69, 69, 69,
	69, 224, 224, 71, 71, 71, 71, 34, 34, 34,
	34, 34, 131, 131, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 83, 83, 35,
	35, 81, 81, 82, 84, 84, 80, 80, 80, 65,
	65, 65, 65, 65, 65, 65, 67, 67, 67, 85,
	85, 86, 86, 87, 87, 88, 88, 89, 90, 90,
	90, 91, 91, 91, 91, 92, 92, 92, 64, 64,
	64, 64, 64, 64, 93, 93, 93, 93, 94, 94,
	75, 75, 77, 77, 76, 78, 95, 95, 96, 97,
	97, 100, 100, 99, 99, 99, 99, 99, 108, 108,
	107, 107, 107, 98, 98, 101, 101, 105, 105, 104,
	106, 106, 106, 106, 103, 103, 102, 102, 132, 132,
	132, 110, 110, 113, 113, 114, 114, 111, 111, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 116,
	116, 116, 117, 117, 207, 207, 120, 120, 121, 121,
	125, 125, 126, 126, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 221, 222, 130,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 3, 1,
	3, 5, 0, 2, 3, 5, 11, 11, 11, 0,
	1, 1, 5, 9, 7, 1, 1, 1, 1, 2,
	3, 2, 0, 2, 1, 1, 0, 2, 1, 3,
	0, 2, 0, 2, 3, 3, 0, 1, 1, 2,
	4, 4, 0, 1, 0, 1, 1, 2, 1, 1,
	1, 4, 4, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 4, 3, 3, 4, 4, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 3, 3, 4, 1, 3, 3, 3, 1,
	1, 3, 1, 1, 1, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	3, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 1, 2, 2, 2, 2,
	2, 2, 3, 1, 3, 4, 1, 1, 1, 1,
	0, 3, 3, 2, 0, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 5, 7, 6,
	6, 7, 7, 1, 1, 1, 3, 2, 6, 7,
	7, 7, 9, 7, 7, 7, 4, 5, 4, 1,
	3, 3, 3, 2, 2, 3, 4, 2, 3, 2,
	2, 4, 4, 3, 6, 3, 6, 5, 5, 3,
	3, 5, 6, 3, 3, 3, 5, 3, 3, 3,
	3, 3, 0, 3, 0, 2, 0, 1, 1, 1,
	0, 2, 2, 4, 2, 2, 2, 2, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 3, 5, 5, 3,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 1, 3, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 1, 2, 3, 3, 3, 2, 3, 1, 2,
	1, 1, 1, 2, 3, 2, 2, 0, 2, 3,
	2, 2, 2, 1, 0, 2, 2, 2, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -219, -7, -8, -12, -13, -14, -15, -16, -17,
	-18, -1, -20, -21, -24, -22, -2, -3, -4, -5,
	-6, -23, -9, -10, 6, -28, 8, 9, 37, -19,
	118, 119, 120, 141, 122, 134, 40, 57, 260, 136,
	267, 270, 271, 274, 273, 288, 33, 135, 139, 140,
	-221, 7, 243, 60, -220, 294, -87, 14, -27, 5,
	-25, -223, -25, -25, -25, -25, -191, 60, 235, -207,
	21, 25, 125, 26, -111, 129, 125, 126, 235, 125,
	125, 229, 118, 224, 262, -53, 264, 265, 231, 125,
	266, 227, 263, 226, 63, 39, 125, -125, 63, -119,
	249, 19, 196, 142, 161, 250, 293, 72, 195, 198,
	199, 137, 157, 201, 200, 193, 151, 35, 191, 175,
	268, 254, 233, 190, 152, 21, 176, 180, 275, 203,
	174, 22, 251, 42, 178, 204, 46, 194, 205, 182,
	181, 183, 164, 17, 206, 207, 177, 179, 253, 139,
	208, 45, 187, 269, 231, 192, 166, 155, 156, 141,
	255, 127, 158, 288, 289, 291, 290, 292, -130, -130,
	66, 253, -130, 272, -130, -130, 289, 291, 290, 292,
	293, -130, -130, -130, -130, -8, -91, 16, 15, -11,
	-9, -221, 6, 28, 29, -33, 47, 48, -26, -111,
	-50, -125, 10, -97, -98, -100, 272, -132, -99, 276,
	277, 275, -121, -108, 278, -120, -118, 165, 162, 63,
	-119, 78, 30, 32, 185, 81, 148, 113, 170, 15,
	82, 159, 112, 232, 197, 244, 118, 55, 236, 237,
	234, 235, 224, 153, 36, 9, 33, 135, 29, 106,
	120, 85, 86, 262, 138, 31, 136, 75, 18, 58,
	10, 39, 12, 13, 130, 129, 97, 126, 53, 7,
	146, 147, 114, 34, 94, 49, 27, 51, 95, 16,
	238, 239, 38, 173, 169, 248, 172, 145, 168, 108,
	56, 43, 79, 73, 154, 76, 59, 140, 77, 14,
	54, 265, 132, 264, 150, 96, 121, 243, 52, 6,
	247, 37, 134, 144, 50, 125, 225, 171, 143, 167,
	84, 128, 74, 266, 5, 26, 188, 8, 57, 131,
	240, 241, 242, 41, 163, 160, 263, 252, 83, 11,
	189, -218, 275, 269, 261, 256, -192, -188, -124, 63,
	-119, -114, 130, 126, 126, 126, -114, 125, -113, 130,
	63, -113, -50, -50, 228, 125, 235, -130, -130, 225,
	-54, 232, 233, -130, -130, -130, 231, -130, -130, -130,
	-130, -130, -50, -130, 66, -130, -76, -221, -76, -130,
	-50, -130, -222, 62, -92, 18, 38, -41, -61, 79,
	-66, 36, 31, -65, -62, -80, -78, -79, 113, 102,
	103, 110, 80, 114, -70, -68, -69, -71, 65, 64,
	66, 67, 68, 69, 73, 74, 75, -120, -125, -76,
	-221, 51, 52, 244, 245, 248, 246, 82, 41, 234,
	242, 241, 240, 238, 239, 236, 237, 130, 235, 108,
	243, 63, -119, -88, -89, -41, -87, -8, -25, 43,
	-31, 29, 71, -51, 34, -50, 37, 115, -50, 61,
	-101, -104, -102, 279, 281, -99, 272, 87, -107, -120,
	65, 36, -107, 37, 15, 15, 62, 61, -134, -137,
	-139, -138, -140, -135, -136, 159, 160, 113, 163, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 137,
	155, 156, 157, 158, 176, 177, 178, 179, 180, 181,
	182, 183, 142, 161, 250, 143, 144, 145, 146, 147,
	148, 150, 151, 152, 153, 154, -125, 79, 63, 63,
	63, -50, -50, -56, -50, 31, 59, -125, -36, 10,
	-50, -50, -52, 10, 10, -52, -130, -130, -130, -74,
	-41, -130, -116, 128, 30, 8, 97, 78, 77, 94,
	61, 17, -41, -63, 97, 79, 95, 96, 81, 99,
	98, 109, 102, 103, 104, 105, 106, 107, 108, 100,
	101, 112, 87, 88, 89, 90, 91, 92, 93, -112,
	-221, -79, -221, 116, 117, -66, -66, -66, -66, -66,
	-66, -221, 115, -8, -221, -221, -221, -221, -221, -221,
	-221, -83, -41, -221, -224, -221, -224, -224, -224, -224,
	-224, -224, -224, -221, -221, -221, -221, 61, -90, 32,
	33, -91, -222, -33, -67, -120, 66, 69, -32, 50,
	-64, 37, 41, -8, -221, -50, -95, -96, -80, -120,
	-125, -126, -125, -118, 162, 165, -60, 11, -100, -132,
	-103, 61, -105, 61, 280, 282, 283, -101, 59, 76,
	-41, -171, 112, -221, 259, 258, -193, -194, -195, -149,
	-145, -147, -148, -150, -151, -152, -153, -154, -155, -156,
	-157, -158, -159, -160, -161, -162, -163, -164, -165, -166,
	-167, -168, -169, 72, 268, -177, 185, 196, 40, 197,
	198, 199, 126, 201, 202, 203, 22, 204, 205, 206,
	207, 208, 209, 210, 211, 212, 36, -188, -189, 132,
	26, -190, 21, 25, 126, 27, -210, -211, -212, -183,
	-142, -184, -185, -186, -143, -30, -144, -172, -173, 73,
	79, 36, 185, 132, 27, 26, 72, 59, 112, 195,
	192, -179, 188, -141, 60, -141, -141, -141, -141, -170,
	162, -170, -170, -170, 60, -141, -141, -141, -181, 60,
	-181, -181, -182, 60, -182, -213, -214, -215, -177, 31,
	59, 59, 59, -115, 121, 268, 244, 123, 120, 124,
	119, 185, 162, 72, 36, 14, 255, 63, 61, -50,
	-91, 230, -130, -130, -55, 95, 11, -50, -50, -130,
	61, -222, -50, 45, -41, -41, -72, 73, 79, 74,
	75, -41, -41, -66, -73, -76, -79, 70, 97, 95,
	96, 81, -66, -66, -66, -66, -66, -66, -66, -66,
	-66, -66, -66, -66, -66, -66, -66, -131, 63, 65,
	63, -65, -65, -120, -39, 29, -38, -40, 104, -41,
	-125, -121, -126, -118, -222, -8, -38, -38, -41, -41,
	-38, -31, -81, -82, 83, -120, -222, -38, -39, -38,
	-38, -89, -92, -110, 18, 10, 41, 41, -38, -94,
	59, -95, -75, -77, -76, -221, -8, -93, -120, -60,
	61, 87, 115, -87, -41, -102, -104, -106, 284, 281,
	287, 63, -124, -221, -221, -195, -176, 87, -176, 112,
	-175, 165, 162, -176, -176, -176, -176, -176, 200, 200,
	-176, -176, -176, -176, -176, -176, -176, -176, -176, -176,
	-176, -176, -176, 27, -190, 63, 63, -190, -190, -212,
	73, 65, 66, 67, 73, 234, 27, 27, 65, 8,
	-174, 63, 65, 190, 191, 36, 36, 193, 194, -180,
	189, 66, -170, -170, 37, -187, 65, 66, 66, -215,
	112, -175, -50, -50, -50, -130, -116, -117, 126, 27,
	87, 128, 133, 133, 133, -50, -130, 65, 65, -41,
	-55, -41, -130, 46, 73, 74, 75, -73, -66, -66,
	-66, -37, 138, 78, -222, -222, -38, 61, -123, -122,
	30, -120, 65, 115, -221, 115, -222, -222, -222, 61,
	131, 30, -222, -38, -84, -82, 85, -41, -222, -222,
	-222, -222, -222, -50, -42, 10, 35, -94, 61, -222,
	-222, -222, 61, 115, -87, -96, -41, -121, -91, 281,
	285, 286, -222, -124, -124, 65, -174, -176, -176, 37,
	66, 66, 66, 65, 65, -176, -176, 66, 65, 63,
	66, 66, 66, 66, 36, 65, 36, 191, 190, 213,
	214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
	66, 36, 66, 36, 66, 36, 63, -119, 60, 63,
	60, 60, 63, 63, -29, -109, 234, 238, 239, 62,
	63, 113, 62, 61, 61, 62, 61, -176, -176, -221,
	-221, -221, -50, -130, 63, 162, -191, 63, -188, -37,
	78, -66, -66, -222, -40, -122, 104, -126, -39, -121,
	-133, 113, 159, 137, 157, 153, 174, 164, 187, 155,
	188, -131, -133, 249, -87, 86, -41, 84, -60, -43,
	-44, -45, -46, -57, -79, -221, -50, 27, -77, 41,
	-8, -221, -120, -120, -91, -222, -222, -174, -174, 65,
	65, -197, -196, -120, 60, -197, -197, 60, 60, 60,
	65, 66, 66, -209, 63, 36, -178, 63, 113, 36,
	-197, -197, -197, 37, -66, 115, -222, -222, -141, -141,
	-141, -182, -141, 147, -141, 147, -222, -222, -221, -35,
	247, -41, -85, 12, 61, -47, -48, -49, 49, 53,
	55, 50, 51, 52, 56, -129, 30, -43, -221, -128,
	-127, 30, -125, 65, 8, -75, -8, 115, -221, -146,
	257, 62, 61, -141, -197, 62, 62, -197, -197, 62,
	66, 62, 62, -222, -222, -222, 63, 104, -170, 63,
	-66, -222, 65, -86, 13, 15, -44, -45, -44, -45,
	49, 49, 49, 54, 49, 54, 49, -48, -125, -222,
	-58, 57, 129, 58, -127, -95, -222, -120, -217, -216,
	256, 66, -196, 62, -200, -200, 62, 62, 62, -200,
	-198, -201, -34, 97, 252, -41, -74, 59, 59, 49,
	49, 126, 126, 126, 61, -222, 63, -200, -206, -202,
	-204, 22, 72, 131, -198, -201, -199, -199, -203, -202,
	252, -199, -202, -222, 250, 56, 253, -41, -41, -221,
	-221, -221, -216, 41, -176, 65, -208, 258, 20, -205,
	38, 19, 24, 46, 251, 254, -59, -120, -59, -59,
	97, 66, -176, -176, 23, 46, -222, 61, -222, -222,
	-76, -209, -209, 252, -120, 253, 254,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 563, 0, 349, 349, 349, 349, 349, 0,
	654, 637, 0, 0, 0, 336, 0, 0, 856, 856,
	0, 856, 0, 856, 856, 0, 856, 856, 856, 856,
	0, 33, 34, 854, 1, 3, 571, 0, 0, 353,
	356, 351, 637, 0, 0, 0, 49, 0, 635, 0,
	0, 0, 635, 655, 0, 638, 633, 0, 633, 0,
	0, 0, 0, 856, 856, 0, 856, 856, 856, 0,
	856, 856, 856, 856, 856, 337, 0, 344, 660, 661,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 303, 304,
	856, 0, 307, 856, 309, 310, 0, 0, 856, 0,
	856, 345, 346, 347, 348, 27, 575, 0, 0, 563,
	29, 0, 349, 354, 355, 359, 357, 358, 350, 0,
	0, 409, 0, 37, 38, 599, 0, 0, 601, 628,
	629, -2, 0, 0, 0, 658, 659, -2, 675, 656,
	657, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 44, 50, 51, 0, 0, 0, 165, 0, 169,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 302, 332, 0, 0, 319, 320, 334,
	0, 338, 339, 323, 324, 325, 334, 327, 328, 329,
	330, 331, 856, 305, 856, 308, 856, 0, 856, 313,
	649, 315, 28, 855, 23, 0, 0, 572, 419, 0,
	424, 426, 0, 461, 462, 463, 464, 465, 0, 0,
	0, 0, 0, 0, 487, 488, 489, 490, 549, 550,
	551, 552, 553, 554, 555, 428, 429, 546, 0, 595,
	0, 0, 0, 0, 0, 0, 0, 537, 0, 511,
	511, 511, 511, 511, 511, 511, 511, 0, 0, 0,
	0, -2, -2, 564, 565, 568, 571, 27, 356, 0,
	361, 360, 352, 0, 0, 408, 0, 0, 417, 0,
	613, 624, 617, 0, 0, 602, 0, 0, 606, 610,
	611, 612, 264, 609, 0, 0, -2, 0, 175, 241,
	172, 173, 174, 234, 190, 234, 234, 234, 234, 260,
	260, 260, 260, 218, 219, 220, 221, 222, 0, 205,
	234, 234, 234, 209, 224, 225, 226, 227, 228, 229,
	230, 231, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 236, 236, 236, 238, 238, -2, 0, 0, 0,
	0, 91, 0, 296, 299, 634, 0, 298, 571, 0,
	856, 856, 340, 0, 0, 856, 343, 306, 311, 0,
	459, 312, 0, 650, 651, 576, 0, 0, 0, 0,
	0, 0, 422, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 446, 447, 448, 449, 450, 451, 452, 425,
	0, 439, 0, 0, 0, 481, 482, 483, 484, 485,
	0, 363, 0, 27, 0, 0, 0, 0, 0, 0,
	359, 0, 538, 0, 503, 0, 504, 505, 506, 507,
	508, 509, 510, 0, 363, 0, 0, 0, 567, 569,
	570, 575, 30, 359, 0, 556, 0, 0, 0, 362,
	588, 0, 0, -2, 0, 407, 417, 596, 0, 546,
	0, 410, 662, 663, 675, 676, 563, 0, 600, 0,
	615, 0, 616, 0, 0, 626, 627, 614, 603, 604,
	605, 607, 0, 0, 0, 0, 92, -2, 95, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 84, 84, 0, 84, 84, 84, 84,
	84, 0, 0, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 83, 166, 167, 0,
	0, 0, 811, 0, 283, 284, 168, 176, 177, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 245,
	0, 0, 259, 0, 273, 275, 0, 0, 0, 0,
	0, 243, 242, 189, 0, 260, 260, 212, 213, 214,
	0, 215, 216, 217, 0, 206, 207, 208, 200, 0,
	201, 202, 203, 0, 204, 45, -2, 78, 0, 636,
	0, 0, 0, 856, 649, 0, 646, 0, 644, 0,
	639, 640, 641, 642, 643, 645, 647, 648, 0, 297,
	856, 0, 317, 318, 321, 0, 0, 335, 340, 326,
	0, 594, 856, 0, 420, 421, 423, 440, 0, 442,
	444, 573, 574, 430, 431, 455, 456, 457, 0, 0,
	0, 0, 453, 435, 0, 466, 467, 468, 469, 470,
	471, 472, 473, 474, 475, 476, 477, 480, 522, 523,
	0, 478, 479, 486, 0, 0, 364, 365, 367, 371,
	0, 547, 0, -2, 458, 27, 0, 0, 0, 0,
	0, 0, 544, 541, 0, 0, 512, 0, 0, 0,
	0, 566, 24, 0, 631, 632, 557, 558, 376, 31,
	0, 588, 578, 590, 592, 0, 27, 0, 584, 563,
	0, 0, 0, 571, 418, 625, 618, 619, 0, 0,
	623, 265, 0, 0, 0, 96, 0, 85, 0, 84,
	84, 86, 0, 0, 0, 0, 0, 0, 84, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	246, 247, 248, 249, 250, 251, 272, 274, 276, 0,
	263, 160, 161, 266, 267, 268, 269, 270, 271, 171,
	244, 0, 210, 211, 0, 0, 232, 0, 0, 79,
	84, 84, 0, 0, 0, 288, 0, 856, 652, 653,
	0, 0, 0, 0, 0, 300, 316, 333, 341, 342,
	322, 460, 314, 577, 441, 443, 445, 432, 453, 436,
	0, 433, 0, 0, 427, 491, 0, 0, 368, 372,
	0, 374, 375, 0, 363, 0, -2, 494, 495, 0,
	0, 0, 0, 563, 0, 542, 0, 0, 502, 513,
	514, 515, 516, 25, 417, 0, 0, 32, 0, 593,
	-2, 0, 0, 0, 571, 597, 598, 547, 36, 620,
	621, 622, 52, 0, 0, 162, 163, 0, 0, 87,
	121, 122, 159, 124, 125, 0, 0, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157, 158, 0, 0,
	0, 0, 0, 0, 252, 253, 256, 257, 258, 235,
	261, 262, 223, 0, 0, 239, 0, 0, 0, 0,
	0, 0, 289, 290, 291, 0, 293, 294, 295, 434,
	0, 454, 437, 492, 366, 373, 369, 0, 0, 548,
	0, 234, 234, 527, 234, 238, 530, 234, 532, 234,
	535, 0, 0, 0, 539, 501, 545, 0, 559, 377,
	378, 380, 381, 382, 390, 0, 392, 0, 591, 0,
	-2, 0, 586, 585, 35, 0, 42, 123, 164, 126,
	127, 0, 285, 234, 0, 0, 0, 0, 0, 0,
	233, 0, 0, 80, 57, 58, 81, 88, 89, 90,
	0, 0, 0, 0, 438, 0, 493, 496, 524, 260,
	528, 529, 531, 533, 534, 536, 498, 497, 0, 0,
	0, 543, 561, 0, 0, 0, 0, 0, 397, 0,
	0, 400, 0, 0, 0, 0, 391, 0, 0, 411,
	393, 0, 395, 396, 0, 581, 27, 0, 0, 54,
	0, 277, 0, 287, 0, 62, 62, 0, 0, 254,
	0, 237, 240, 62, 66, 70, 292, 370, 525, 526,
	517, 500, 540, 26, 0, 0, 379, 386, 0, 389,
	398, 399, 401, 0, 403, 0, 405, 406, 383, 384,
	385, 0, 0, 0, 394, 589, -2, 587, 0, 39,
	0, 43, 286, 62, 279, 280, 66, 70, 255, 72,
	72, 72, 0, 0, 0, 562, 560, 0, 0, 402,
	404, 0, 0, 0, 0, 53, 0, 278, 63, 64,
	65, 84, 0, 0, 281, 282, 46, 47, 67, 68,
	0, 48, 71, 499, 0, 0, 0, 387, 388, 0,
	0, 0, 40, 0, 0, 61, 59, 55, 56, 73,
	84, 84, 0, 518, 0, 521, 0, 415, 0, 0,
	0, 60, 0, 0, 69, 519, 412, 0, 413, 414,
	41, 74, 75, 0, 416, 0, 520,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 80, 3, 3, 3, 107, 99, 3,
	60, 62, 104, 102, 61, 103, 115, 105, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 294,
	88, 87, 89, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 110,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 81, 82, 83, 84, 85,
	86, 90, 91, 92, 93, 94, 95, 96, 97, 100,
	101, 106, 108, 111, 112, 113, 114, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:992
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:998
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1000
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1004
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1028
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1036
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1040
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1047
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1053
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1057
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1063
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1067
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1073
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1084
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1096
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1100
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1106
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1112
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1118
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1122
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1128
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1132
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1138
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1144
		{
			yyVAL.optVal = nil
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1148
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1158
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1165
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 46:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1173
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 47:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1177
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 48:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1181
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1187
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1191
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1195
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1199
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 53:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1205
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1212
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1221
		{
			yyVAL.str = "hash"
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1225
		{
			yyVAL.str = "btree"
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1231
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1235
		{
			yyVAL.str = "default"
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1241
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1250
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1257
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1265
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1269
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1275
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1279
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1284
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1288
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1294
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1298
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1306
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1310
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1315
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1319
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1325
		{
			if !CheckIndexLock(yyDollar[3].str) {
				yylex.Error("unknown lock type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionLock,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1336
		{
			if !CheckIndexAlgorithm(yyDollar[3].str) {
				yylex.Error("unknown algorithm type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionAlgorithm,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1348
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1352
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1358
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1362
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1368
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1375
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1383
		{
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1385
		{
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1388
		{
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1390
		{
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1394
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1398
		{
			yyVAL.str = "character set"
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1404
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1408
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1412
		{
			yyVAL.str = "default"
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1418
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1429
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1510
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1514
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1520
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1524
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1530
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1537
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1544
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1551
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1558
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1565
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1572
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1579
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1586
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1593
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1600
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1607
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1614
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1621
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1628
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1635
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1642
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1649
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1656
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1663
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1670
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1677
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1684
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1691
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1700
		{
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1704
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1710
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1716
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1729
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1735
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1741
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1747
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1753
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1769
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1782
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1788
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1794
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1800
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1804
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1810
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1818
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1822
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1826
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1830
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1834
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1838
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1842
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1846
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1850
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1854
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1858
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1862
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1866
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1870
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1876
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1880
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1886
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1890
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1897
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1901
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1907
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1911
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1917
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1923
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1928
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1935
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1941
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1947
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1953
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1958
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1962
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1968
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1984
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1988
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1994
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2004
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2008
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2014
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2018
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2024
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2031
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2038
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2045
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2052
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2059
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2066
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2073
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2080
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2087
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2096
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2101
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2107
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2111
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2115
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2119
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2123
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2131
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2135
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2139
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2145
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2151
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2157
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2163
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2169
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2177
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2181
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2185
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2189
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2193
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2199
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2203
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2207
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2211
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2215
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2219
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2223
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2227
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2231
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2235
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2239
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2243
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2247
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2251
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2257
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2261
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2265
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2269
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2273
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2277
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2281
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2285
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2291
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2296
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2301
		{
			yyVAL.optVal = nil
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2305
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2310
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2314
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2322
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2326
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2332
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2340
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2344
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2349
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2353
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2360
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2364
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2370
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2374
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2378
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2382
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2386
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2392
		{
			yyVAL.str = yyDollar[3].str
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2398
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2402
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2406
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2414
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2418
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2422
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2429
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2434
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2438
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2442
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2449
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2454
		{
			yyVAL.str = ""
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2458
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2464
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2468
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2472
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2478
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2484
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2488
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2494
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2498
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2507
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2511
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2523
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[4].indexColumns, nil),
				Primary: true,
				Unique:  true,
			}
		}
	case 278:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2533
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].str),
				Name:    NewColIdent(string(yyDollar[3].bytes)),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 279:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2543
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes),
				Name:    NewColIdent(string(yyDollar[2].bytes)),
				Opts:    NewIndexOptions(yyDollar[4].indexColumns, yyDollar[6].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 280:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2553
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(string(yyDollar[2].bytes)),
				Opts:    NewIndexOptions(yyDollar[4].indexColumns, yyDollar[6].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2563
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].str),
				Name:    NewColIdent(string(yyDollar[3].bytes)),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 282:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2573
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].str),
				Name:    NewColIdent(string(yyDollar[3].bytes)),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2585
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2589
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2595
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2599
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2605
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 288:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2611
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2615
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2620
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2625
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2629
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2633
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2637
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2641
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2647
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2655
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2660
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2670
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2674
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2680
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2686
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2692
		{
			yyVAL.statement = &Xa{}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2698
		{
			yyVAL.statement = &Explain{}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2704
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2708
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2714
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2718
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2722
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2726
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2732
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2736
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2740
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 314:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2744
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2748
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 316:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2754
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 317:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2758
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2762
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2766
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2770
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2774
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].tableName, Filter: yyDollar[5].showFilter}
		}
	case 322:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2778
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[6].showFilter}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2782
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2786
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2790
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2794
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2798
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2802
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2806
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2810
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2814
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2819
		{
			yyVAL.str = ""
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2823
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2828
		{
			yyVAL.tableName = TableName{}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2832
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2838
		{
			yyVAL.str = ""
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2842
		{
			yyVAL.str = "full "
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2848
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2852
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2858
		{
			yyVAL.showFilter = nil
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2862
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2866
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2872
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2878
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2884
		{
			yyVAL.statement = &OtherRead{}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2888
		{
			yyVAL.statement = &OtherRead{}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2892
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2896
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2901
		{
			setAllowComments(yylex, true)
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2904
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2910
		{
			yyVAL.bytes2 = nil
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2914
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2920
		{
			yyVAL.str = UnionStr
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2924
		{
			yyVAL.str = UnionAllStr
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2928
		{
			yyVAL.str = UnionDistinctStr
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2933
		{
			yyVAL.str = ""
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2937
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2941
		{
			yyVAL.str = SQLCacheStr
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2946
		{
			yyVAL.str = ""
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2950
		{
			yyVAL.str = DistinctStr
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2955
		{
			yyVAL.str = ""
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2959
		{
			yyVAL.str = StraightJoinHint
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2964
		{
			yyVAL.selectExprs = nil
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2968
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2974
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2978
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2984
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2988
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2992
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 370:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2996
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3001
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3005
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3009
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3016
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3021
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3025
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3031
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3035
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3045
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3049
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3053
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3059
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3072
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3076
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 388:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3080
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3084
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3089
		{
			yyVAL.empty = struct{}{}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3093
		{
			yyVAL.empty = struct{}{}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3098
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3102
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3106
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3113
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3119
		{
			yyVAL.str = JoinStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3123
		{
			yyVAL.str = JoinStr
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3127
		{
			yyVAL.str = JoinStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.str = StraightJoinStr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3137
		{
			yyVAL.str = LeftJoinStr
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3141
		{
			yyVAL.str = LeftJoinStr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3145
		{
			yyVAL.str = RightJoinStr
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3149
		{
			yyVAL.str = RightJoinStr
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3155
		{
			yyVAL.str = NaturalJoinStr
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3159
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3169
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3173
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3179
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3183
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3188
		{
			yyVAL.indexHints = nil
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3192
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3196
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3200
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3206
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3210
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3215
		{
			yyVAL.expr = nil
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3219
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3225
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3229
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3233
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3237
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3241
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3245
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3249
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3255
		{
			yyVAL.str = ""
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3259
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3269
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3275
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3279
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3283
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3287
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 434:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3291
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3295
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3299
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3303
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 438:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3307
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3311
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3317
		{
			yyVAL.str = IsNullStr
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3321
		{
			yyVAL.str = IsNotNullStr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3325
		{
			yyVAL.str = IsTrueStr
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3329
		{
			yyVAL.str = IsNotTrueStr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3333
		{
			yyVAL.str = IsFalseStr
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3337
		{
			yyVAL.str = IsNotFalseStr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3343
		{
			yyVAL.str = EqualStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3347
		{
			yyVAL.str = LessThanStr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3351
		{
			yyVAL.str = GreaterThanStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3355
		{
			yyVAL.str = LessEqualStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3359
		{
			yyVAL.str = GreaterEqualStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3363
		{
			yyVAL.str = NotEqualStr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3367
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3372
		{
			yyVAL.expr = nil
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3376
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3382
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3386
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3390
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3396
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3402
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3406
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3412
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3416
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3420
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3424
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3428
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3432
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3436
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3440
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3444
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3448
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3452
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3456
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3460
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3464
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3468
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3472
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3476
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3480
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3484
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3488
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3492
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3496
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3504
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3518
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3522
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3526
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3544
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 492:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3548
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 493:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3552
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3562
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3566
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3570
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 497:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3574
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 498:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3578
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 499:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3582
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 500:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3586
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 501:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3590
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3594
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3604
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3608
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3612
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3616
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3621
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3626
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3631
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3636
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3651
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3655
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3659
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3663
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3669
		{
			yyVAL.str = ""
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3673
		{
			yyVAL.str = BooleanModeStr
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3677
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 520:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3681
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3685
		{
			yyVAL.str = QueryExpansionStr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3691
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3695
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3701
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3705
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3709
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3713
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3717
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3721
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3727
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3731
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3735
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3739
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3743
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3747
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3751
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3756
		{
			yyVAL.expr = nil
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3760
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3765
		{
			yyVAL.str = string("")
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3769
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3775
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3779
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3785
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3790
		{
			yyVAL.expr = nil
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3794
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3800
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3804
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 548:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3808
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3814
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3818
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3822
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3826
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3830
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3834
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3838
		{
			yyVAL.expr = &NullVal{}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3844
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3853
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3857
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3862
		{
			yyVAL.exprs = nil
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3866
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3871
		{
			yyVAL.expr = nil
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3875
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3880
		{
			yyVAL.orderBy = nil
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3884
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3890
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3894
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3900
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3905
		{
			yyVAL.str = AscScr
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3909
		{
			yyVAL.str = AscScr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3913
		{
			yyVAL.str = DescScr
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3918
		{
			yyVAL.limit = nil
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3922
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3926
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3930
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3935
		{
			yyVAL.str = ""
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3939
		{
			yyVAL.str = ForUpdateStr
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3943
		{
			yyVAL.str = ShareModeStr
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3956
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3960
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3964
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3969
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3973
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 583:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3977
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3984
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3988
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3992
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3996
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4001
		{
			yyVAL.updateExprs = nil
		}
	case 589:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4005
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4011
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4015
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4021
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4025
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4031
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4037
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4047
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4051
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4057
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4063
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4067
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4073
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4077
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4084
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4088
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4092
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4096
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4100
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4107
		{
			yyVAL.bytes = []byte("charset")
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4113
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4117
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4121
		{
			yyVAL.expr = &Default{}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4127
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4131
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4137
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4141
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4147
		{
			yyVAL.str = ""
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4151
		{
			yyVAL.str = yyDollar[2].str
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4157
		{
			yyVAL.str = yyDollar[3].str
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4163
		{
			yyVAL.str = RepeatableRead
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4167
		{
			yyVAL.str = ReadCommitted
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4171
		{
			yyVAL.str = ReadUncommitted
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4175
		{
			yyVAL.str = Serializable
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4181
		{
			yyVAL.str = ""
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4185
		{
			yyVAL.str = yyDollar[2].str
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4191
		{
			yyVAL.str = TxReadWrite
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4195
		{
			yyVAL.str = TxReadOnly
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4201
		{
			yyVAL.str = SessionStr
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4205
		{
			yyVAL.str = SessionStr
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4209
		{
			yyVAL.str = GlobalStr
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4218
		{
			yyVAL.byt = 0
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4222
		{
			yyVAL.byt = 1
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4227
		{
			yyVAL.byt = 0
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4231
		{
			yyVAL.byt = 1
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4236
		{
			yyVAL.str = ""
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4240
		{
			yyVAL.str = IgnoreStr
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4246
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4250
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4254
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4258
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4262
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4266
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4270
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4274
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4278
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4282
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4287
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4291
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4295
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4301
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4305
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4310
		{
			yyVAL.str = IndexStr
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4314
		{
			yyVAL.str = UniqueStr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4320
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4324
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4331
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4337
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4341
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4348
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4565
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4574
		{
			decNesting(yylex)
		}
	case 856:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4579
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
